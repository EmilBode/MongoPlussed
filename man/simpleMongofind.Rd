% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Mongo_extensions.R
\name{simpleMongofind}
\alias{simpleMongofind}
\title{Simplified find in mongo}
\usage{
simpleMongofind(moncol, qry = "{}", fields = "{\\"_id\\" : 0}",
  sort = "{}", skip = 0, limit = 0, handler = NULL,
  pagesize = 1000, verbose = F)
}
\arguments{
\item{moncol}{mongo-collection pointer}

\item{qry}{a query to be supplied to the mongo-database, in json-notation}

\item{fields}{fields to be retrieved, in json-notation}

\item{sort}{fields to be sorted on}

\item{skip}{number of records to skip. Useful together with limit, to continue later}

\item{limit}{limit to the number of records returned, or 0 for no limit}

\item{handler}{A function to be applied over the results, e.g. to further filter results. Note that it differs from a handler given to regular "find" in that it is not given a data-frame.}

\item{pagesize}{size of paging to use, see return value}

\item{verbose}{emit extra output in the form of a counter}
}
\value{
A list of pages with the returns from the mongo DB. To get to a simple list of returns, use unlist(recursive=FALSE)
}
\description{
When querying a mongo-database and getting back a large result-set, most time is spent on casting this to a data.frame.\cr
Especially when this is a intermediate step, it is also often unnecessary.
So this function does as little as needed, to save time.\cr
Also useful if for some reason casting to dataframe produces unexpected results.\cr
This function was written before I found out about iterate(), so unclear if it has much use
Note that the original mongolite find-function was more object-oriented, and used a mongo connection object, while this function
has to be supplied a mongo-collection object (in mongolite, this is stored as an internal pointer). You can get this by connecting using monPlus, and then accessing the 'col' method.
Or simply accessing this function with the $simfind-method
}
\seealso{
mongolite::mongo
}
